plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    accessWidenerPath = file("src/main/resources/fallingleaves.accesswidener")
}

repositories {
    maven { url = 'https://maven.shedaniel.me/' }
    maven { url = 'https://maven.terraformersmc.com/' }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modCompileOnly "maven.modrinth:fabric-seasons:${project.fabric_seasons_version}"
    modCompileOnly "maven.modrinth:serene-seasons:${project.serene_seasons_version}"
}

processResources {
    // expand all properties from gradle.properties
    def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
    stringProperties.each { inputs.property(it.key, it.value) }

    filesMatching(['*.mod.json', "*.mixins.json"]) {
        expand(stringProperties) {
            escapeBackslash = true
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.compilerArgs.add('-Xlint:deprecation')
    it.options.release = project.java_version as Integer
}

java {
    targetCompatibility = sourceCompatibility = project.java_version as Integer
    withSourcesJar()
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

def changesMd = file('changes.md').getText('UTF-8')
def toList = (String s) -> s.split(',').collect { it.trim() }
def gameVersionList = toList(project.game_version_list)

modrinth {
    def MODRINTH_TOKEN = System.getenv('MODRINTH_TOKEN')
    if (MODRINTH_TOKEN != null) {
        token = MODRINTH_TOKEN
        projectId = project.modrinth_id
        versionName = project.mod_version
        versionNumber = project.version
        versionType = 'release'
        uploadFile = remapJar
        changelog = changesMd
        gameVersions = gameVersionList
        loaders = ['fabric']
        dependencies {
            toList(project.modrinth_dependencies).each { required.project(it) }
            toList(project.modrinth_optional_dependencies).each { optional.project(it) }
        }
    }
}

tasks.modrinth.dependsOn("build")

curseforge {
    def CURSEFORGE_TOKEN = System.getenv('CURSEFORGE_TOKEN')
    if (CURSEFORGE_TOKEN != null) {
        apiKey = CURSEFORGE_TOKEN
        project {
            id = project.curseforge_id
            releaseType = 'release'
            changelogType = 'markdown'
            changelog = changesMd

            addGameVersion 'Fabric'
            gameVersionList.each { addGameVersion(it) }

            relations {
                toList(project.curseforge_dependencies).each { requiredDependency(it) }
                toList(project.curseforge_optional_dependencies).each { optionalDependency(it) }
            }
            mainArtifact(remapJar.archiveFile.get().asFile) {
                displayName = "${project.mod_version} [${versionRange(gameVersionList)}]"
            }
            afterEvaluate {
                uploadTask.dependsOn('build')
            }
        }
        options {
            forgeGradleIntegration = false
            javaVersionAutoDetect = false
        }
    }
}

static String versionRange(List<String> gameVersions) {
    if (gameVersions.size() == 1)
        return gameVersions[0]

    def v0 = gameVersions.first()
    def v1 = gameVersions.last()

    def m0 = v0.split('[.]')[1]
    def m1 = v1.split('[.]')[1]

    if (m0 == m1)
        return v1

    return "${v0} - ${v1}"
}
